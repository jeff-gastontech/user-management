buildscript {
    ext {
        springBootVersion = '2.6.7'
        wrapperVersion = '1.0.29.BUILD-SNAPSHOT'
        shadowVersion = '5.1.0'
    }
    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
    dependencies {
        classpath "com.github.jengelman.gradle.plugins:shadow:${shadowVersion}"
        classpath("org.springframework.boot.experimental:spring-boot-thin-gradle-plugin:${wrapperVersion}")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("io.spring.gradle:dependency-management-plugin:1.0.8.RELEASE")
        classpath "io.freefair.gradle:lombok-plugin:6.4.3"
        classpath 'com.guardsquare:proguard-gradle:7.2.1'
    }
}

apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'eclipse'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'org.springframework.boot'
apply plugin: 'org.springframework.boot.experimental.thin-launcher'
apply plugin: 'io.spring.dependency-management'
apply plugin: "io.freefair.lombok"

group = 'io.spring.sample'
version = '2.0.0.RELEASE'
sourceCompatibility = 11
targetCompatibility = 11

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}

ext {
    springCloudFunctionVersion = "3.2.4"
    awsLambdaEventsVersion = "3.9.0"
    awsLambdaCoreVersion = "1.1.0"
}
ext['reactor.version'] = "3.1.7.RELEASE"

assemble.dependsOn = [shadowJar, thinJar]

jar {
    manifest {
        attributes 'Main-Class': 'com.gastontechnologies.usermanagement.UserManagementApplication'
    }
}

import com.github.jengelman.gradle.plugins.shadow.transformers.*

shadowJar {
    classifier = 'aws'
    dependencies {
        exclude(
                dependency("org.springframework.cloud:spring-cloud-function-web:${springCloudFunctionVersion}"))
    }
    // Required for Spring
    mergeServiceFiles()
    append 'META-INF/spring.handlers'
    append 'META-INF/spring.schemas'
    append 'META-INF/spring.tooling'
    transform(PropertiesFileTransformer) {
        paths = ['META-INF/spring.factories']
        mergeStrategy = "append"
    }
}

configurations {
    testCompile.extendsFrom(compileOnly)
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-function-dependencies:${springCloudFunctionVersion}"
        mavenBom "software.amazon.awssdk:bom:2.17.189"
    }
}

task copyRuntimeDependencies(type: Copy) {
    from configurations.runtimeClasspath
    into 'build/dependency'
}

build.dependsOn copyRuntimeDependencies

dependencies {
    implementation("org.springframework.cloud:spring-cloud-function-adapter-aws")
    implementation("org.springframework.boot:spring-boot-configuration-processor")
    implementation("com.azure:azure-identity:1.5.1")
    implementation("com.microsoft.graph:microsoft-graph:5.24.0")
    implementation("mysql:mysql-connector-java")
    implementation("org.springframework:spring-jdbc")
    implementation("com.zaxxer:HikariCP")
    implementation("software.amazon.awssdk:ssm")
    implementation("org.passay:passay:1.6.1")

    // https://mvnrepository.com/artifact/com.amazonaws/aws-lambda-java-runtime-interface-client
    implementation 'com.amazonaws:aws-lambda-java-runtime-interface-client:2.1.1'


    compileOnly("com.amazonaws:aws-lambda-java-events:${awsLambdaEventsVersion}")
    compileOnly("com.amazonaws:aws-lambda-java-core:${awsLambdaCoreVersion}")
    testCompile('org.springframework.boot:spring-boot-starter-test')
}